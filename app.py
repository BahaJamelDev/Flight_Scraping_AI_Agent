"""
fichier: app.py
R√¥le:
- Ce fichier contient l'interface utilisateur construite avec Streamlit.
- Il permet √† l'utilisateur de saisir ses pr√©f√©rences de vol (ville de d√©part, destination, date, budget, etc.).
- Il lance le scraping via le module flight_scraper.
- Il applique un filtrage des r√©sultats (budget, heure, escales).
- Il appelle l'agent IA (flight_recommender) pour g√©n√©rer une r√©ponse finale claire.
"""
import streamlit as st # Interface utilisateur web 
from datetime import date, datetime # Gestion des dates
from flight_scraper import scrape_and_save # Fonction de scraping 
from flight_recommender import agent # Agent IA qui analyse et formule la r√©ponse
import asyncio
import sys
import html
import re
import pandas as pd

# Fix boucle asyncio sous Windows
if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

# Configuration g√©n√©rale de la page Streamlit
st.set_page_config(
    page_title="Assistant Vol IA",
    page_icon="üõ´",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Titre et description de l'application
st.title("üõ´ Assistant Vol IA ‚Äì Recherche Automatique")
st.markdown("üí° **Trouvez rapidement le meilleur vol sur Google Flights** gr√¢ce √† notre assistant IA.")


# Formulaire principal pour saisir les informations du vol
with st.form("flight_form"):
    col1, col2 = st.columns(2)
    with col1:
        # Champ pour la ville/a√©roport de d√©part (code IATA)
        departure_city = st.text_input("üìç Ville de d√©part", placeholder="Ex: TUN (code IATA)")
    with col2:
        # Champ pour la ville/a√©roport d‚Äôarriv√©e (code IATA)
        destination_city = st.text_input("üèÅ Ville de destination", placeholder="Ex: CDG (code IATA)")

    col3, col4 = st.columns(2)
    with col3:
        # S√©lection de la date du vol
        flight_date = st.date_input("üìÖ Date du vol", value=date.today())
    with col4:
        # Choix de la p√©riode de vol (matin/apr√®s-midi/soir)
        period_choice = st.selectbox(
            "üïí P√©riode du vol",
            ["Matin (00h-12h)", "Apr√®s-midi (12h-18h)", "Soir (18h-24h)"],
            index=0
        )

    col5, col6 = st.columns(2)
    with col5:
        # Choix sur les escales
        stopover_pref = st.selectbox(
            "‚úàÔ∏è Pr√©f√©rence de vol",
            ["Peu importe", "Sans escale", "Avec escale"]
        )
    with col6:
        # Saisie du budget maximal
        max_budget = st.number_input(
            "üí∞ Budget maximal (‚Ç¨)",
            min_value=0,
            step=50,
            format="%d"
        )

    # Bouton de soumission du formulaire
    submitted = st.form_submit_button("üîç Rechercher le vol id√©al")


# Si l'utilisateur valide le formulaire
if submitted:
    if not departure_city or not destination_city:
        # V√©rifie que les champs obligatoires sont remplis
        st.warning("‚ö†Ô∏è Merci de remplir tous les champs obligatoires.")
    else:
        # Formatage de la date en cha√Æne
        formatted_date = flight_date.strftime("%Y-%m-%d")

        # √âtape 1 : Scraping des vols avec flight_scraper
        with st.spinner("üï∑Ô∏è Scraping des vols..."):
            scrape_and_save(departure_city, destination_city, formatted_date)

        try:
            # √âtape 2 : Lecture des donn√©es de vol extraites
            df = pd.read_csv("flight_data.csv")

            # Nettoyage prix ‚Üí float
            df['Price'] = df['Price'].astype(str).str.replace(r"[^\d.]", "", regex=True).astype(float)
            df['Departure Time'] = pd.to_datetime(df['Departure Time'], errors='coerce')

            # √âtape 3 : Filtrage par budget
            if max_budget > 0:
                df = df[df['Price'] <= max_budget]

            # √âtape 4 : Filtrage par p√©riode de vol
            if "Matin" in period_choice:
                df = df[df['Departure Time'].dt.hour < 12]
            elif "Apr√®s-midi" in period_choice:
                df = df[(df['Departure Time'].dt.hour >= 12) & (df['Departure Time'].dt.hour < 18)]
            else:
                df = df[df['Departure Time'].dt.hour >= 18]

            # Si aucun vol ne correspond
            if df.empty:
                st.error("‚ùå Aucun vol trouv√© pour vos crit√®res.")
                st.stop()
            # √âtape 5 : S√©lection du meilleur vol (prix puis heure)
            best_flight = df.sort_values(by=["Price", "Departure Time"]).iloc[0]

            # √âtape 6 : Pr√©paration de la requ√™te pour l'agent IA
            query = f"""
Vol recommand√© :
- Compagnie : {best_flight['Airline Company']}
- D√©part : {best_flight['Departure Time'].strftime('%H:%M')}
- Arriv√©e : {best_flight['Arrival Time']}
- Dur√©e : {best_flight['Flight Duration']}
- Prix : {best_flight['Price']} ‚Ç¨
- Escales : {best_flight['Stops']}
"""
        except Exception as e:
            st.error(f"‚ùå Erreur lors du traitement des donn√©es : {e}")
            st.stop()
        # √âtape 7 : Appel de l'agent IA pour g√©n√©rer la r√©ponse finale
        with st.spinner("ü§ñ L'IA pr√©pare la r√©ponse..."):
            response = agent.invoke(query)
            message = response.get("output", "") if isinstance(response, dict) else response
            message = html.unescape(message)
            message = re.sub(r'\\[nrt]', '\n', message)

            st.markdown("### üß† R√©sultat final")
            st.markdown(
                f"<pre style='white-space: pre-wrap; color: white; background-color: #1e1e1e; padding: 1rem;'>{message}</pre>",
                unsafe_allow_html=True
            )
